from langchain_core.pydantic_v1 import BaseModel, Field
from langchain.output_parsers import PydanticOutputParser
from langchain.prompts import PromptTemplate
from langchain.output_parsers import CommaSeparatedListOutputParser
from langchain_core.output_parsers import JsonOutputParser, StrOutputParser
from langchain_community.agent_toolkits import create_sql_agent
import sqlite3
import pandas as pd

class KpiModel(BaseModel):
    """KPI Generated by LLM"""
    insight_content:  list = Field(description="KPIs from the DDL according to the question")

class SqlQuery(BaseModel):
    """SQL Generated by LLM"""
    sql: str = Field(description="Sql query in string format")


class DataResults(BaseModel):
    """Data Fetched by LLM"""
    result: str = Field(description="Aggregated KPIs from the data")



def get_tables_ddl(database_uri):
    database_uri = database_uri.replace("sqlite:///", "")

    # Connect to the database
    connection = sqlite3.connect(database_uri)
    cursor = connection.cursor()

    # List to store DDL queries
    ddl_queries = []

    # Query to get the DDL queries for all tables
    all_tables_query = "SELECT name, sql FROM sqlite_master WHERE type='table';"
    cursor.execute(all_tables_query)
    results = cursor.fetchall()

    for result in results:
        table_name, ddl_query = result
        ddl_queries.append(ddl_query)

    # Close the connection
    connection.close()

    # Join the DDL queries into a single string
    ddl_string = "\n\n".join(ddl_queries)

    return ddl_string
    

def generate_kpi(user_question, ddl_info, llm):
    
    template_string = """

    I want you to act as a Data Analyst who will provide details about relevant crucial KPIs from the given Data Definition Language 
    of all the tables in the database. 
    I will give you a question which will contain the name of columns and DDL information which contains the data in answer to the
    question.
    Also make sure that in description of KPI you also specify where required on which column "order by" clause will benefit more for analysis.
    You will answer the question according to the DDL (Do not assume any other tables or columns apart from the given DDL) which is after
    analyzing question provide crucial relevant KPIs, KPIs can be aggregation of two or three columns to get good relevant insights from them. 
    You will start directly from the answer.
    You will not output or assume anything from your own, Just output the answer.


    If you will not follow the guidelines you will be penalized
    

    =================================================================

    Question: 
    {analysis_question}

    =================================================================

    DDL: 
    {ddl}

    =================================================================

    KPIs Format:
    {format_instructions}
    """
    #The output KPI Descriptions should be in lists

    try:
        
        parser = JsonOutputParser(pydantic_object=KpiModel)

        PROMPT = PromptTemplate(
            input_variables=["analysis_question", "ddl"],
            template=template_string,
            partial_variables={"format_instructions": parser.get_format_instructions}
        )

        kpi_analysis = PROMPT | llm | parser

        analysis_insights = kpi_analysis.invoke({
            "analysis_question": user_question,
            "ddl": ddl_info
        })

        print(analysis_insights)

        return analysis_insights['properties']['insight_content']['items']

    except Exception as ex:
        e = str(ex)
        return e

    


def generate_sql_output_wrt_kpi(kpi, db_uri, ddl, llm):

    DEFAULT_PROMPT = """You are a SQLite expert. Given an input question, first create a syntactically correct SQLite 
    query to run, then look at the results of the query and return the answer to the input question. Unless the user 
    specifies in the question a specific number of examples to obtain, by default query for at most 15 results using the LIMIT
    clause as per SQLite but if user has provided the LIMIT for query records use that instead of by default 15. 
    You can order the results to return the most informative data in the database. Never query 
    for all columns from a table. You must query only the columns that are needed to answer the question. Wrap each 
    column name in double quotes (") to denote them as delimited identifiers. Pay attention to use only the column 
    names you can see in the tables below. Be careful to not query for columns that do not exist. Also, pay attention 
    to which column is in which table. Pay attention to use date('now') function to get the current date, 
    if the question involves "today". 
    Also be carefull whenever providing an aggregating query use ID column instead of text column if provided for aggregation.
    DO NOT make any DML statements (INSERT, UPDATE, DELETE, DROP etc.) to the 
    database.

    Use the following format:

    Only use the following tables:
    {table_info}

    Write an initial draft of the query. Then double check the SQLite query for common mistakes, including:
    - Using NOT IN with NULL values
    - Using UNION when UNION ALL should have been used
    - Using BETWEEN for exclusive ranges
    - Data type mismatch in predicates
    - Properly quoting identifiers
    - Using the correct number of arguments for functions
    - Casting to the correct data type
    - Using the proper columns for joins
    - Add Order By clause where neccessary

        ================================ Human Message =================================

    Question: 
    {input}

        ================================ Output Format =================================

    Use format:

    Sql query in string format


    """

    try:
        #parser = JsonOutputParser(pydantic_object=SqlQuery)

        PROMPT = PromptTemplate(
            input_variables=["input", "table_info"], 
            template=DEFAULT_PROMPT,
           # partial_variables={"format_instructions": parser.get_format_instructions()}
        )

        query_chain = PROMPT | llm | StrOutputParser()
        sql_query = query_chain.invoke({
            "input": kpi,
            "table_info": ddl
        })


        

        truncated_query = sql_query.replace("sql", "")
        truncated_query = truncated_query.replace("`", "")
        print(truncated_query)

        df = pd.read_sql(truncated_query, db_uri)

        return df.to_markdown()
        
    except Exception as ex:
        print(f"Exception in getting data: {ex}")
        return ex


def generate_results(data, db_uri, ddl, llm):

    responses = "Following are the KPIs and their results extracted from database: "

        #Iterating through each KPI and generating results from the database
    for idx, item in enumerate(data):
        try:
            individual_kpi = ""
            for key, value in item.items():
                individual_kpi += f"{key} - {value} - "

            individual_kpi = individual_kpi.rstrip(" - ")

            #individual_kpi = f" {item['KPI']} - {item['Description']}"
            result =  generate_sql_output_wrt_kpi(individual_kpi, db_uri, ddl, llm)
            print("kpi", individual_kpi)
            print(result)
            
            responses = responses + "\n" + individual_kpi + "\n Output: " + result + "\n\n"
        except Exception as e:
            print(f"Exception in generating output from database: {e}")
            responses = "Please try again and provide analysis metric"

    return responses


def generate_report(user_question, kpi_data, llm):

    DEFAULT_PROMPT = """
        I want you to act as an Expert Data Analyst who will write a detailed analytics report on user's asked question,
        extracted from the given aggregated data. 
        I will give you a user question and detailed KPIs data (extracted from database) all which is relevant to the user question,
        which contains all the neccesary data for detailed insight report you ahve create. 
        You will write easy to understand report.
        Use the data provided only and nothing from your own. 
        If data is not provided in data section just output following message: "database is missing"
        You will start directly from the answer.
        You will not output or assume anything from your own, Just output the answer.

        After Writing the report double check formatting of numbers and text.

        If you will not follow the guidelines you will be penalized

        ================================ Question =================================

    Question: 
    {input}

        =================== Extracted Relevant KPI Data from Database ==================

    Data:
    {data}


    """

    try:

        PROMPT = PromptTemplate(
            input_variables=["input", "data"], 
            template=DEFAULT_PROMPT,
           # partial_variables={"format_instructions": parser.get_format_instructions()}
        )

        chain = PROMPT | llm | StrOutputParser()
        report = chain.invoke({
            "input": user_question,
            "data": kpi_data
        })


        return report
        
    except Exception as ex:
        print(f"Exception in generating report: {ex}")
        return "Please try again"





